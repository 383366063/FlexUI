<?xml version="1.0" encoding="utf-8"?>
<!--

This file is part of LANE WEBOS

Copyright (c) 2011 LANE WEBOS

Contact:  http://www.lanelife.org/contact

GNU General Public License Usage
This file may be used under the terms of the GNU General Public License version 2.0 as published by the Free Software Foundation and appearing in the file LICENSE included in the packaging of this file.  Please review the following information to ensure the GNU General Public License version 2.0 requirements will be met: http://www.gnu.org/copyleft/gpl.html.

If you are unsure which license is appropriate for your use, please contact the sales department at http://www.lanelife.org/contact.

-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="net.lanelife.framework.os.components.*"
		 creationComplete="init(event)">
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import net.lanelife.framework.catwindows.components.TrayIcon;
			import net.lanelife.framework.catwindows.events.TrayIconEvent;
			import net.lanelife.framework.os.core.ScreenContext;
			
			
			public var screenContext:ScreenContext;
			
			private var displayPopup:Boolean = false;
			
			private function parent_mouseDownHandler(event:MouseEvent):void
			{
				if (!displayPopup)
					trayIconContainerArrowButton.selected = false;
			}
			
			protected function trayIconContainerArrowButton_changeHandler(event:Event):void
			{
				iconsContainer.addElement(iconsGroup);
			}
			
			protected function init(event:FlexEvent):void
			{
				screenContext.observer(TrayIconEvent.TRAY_ICON_CREATE, trayIconCreate);
				screenContext.observer(TrayIconEvent.TRAY_ICON_DESTROY, trayIconDestroy);
				
				FlexGlobals.topLevelApplication.parent.addEventListener(MouseEvent.MOUSE_DOWN, parent_mouseDownHandler);
			}
			
			private function trayIconCreate(trayIcon:TrayIcon):void
			{
				if (trayIcon.display)
					this.addElement(trayIcon);
				else
					iconsGroup.addElement(trayIcon);
			}
			
			private function trayIconDestroy(trayIcon:TrayIcon):void
			{
				if (trayIcon.display)
					this.removeElement(trayIcon);
				else
					iconsGroup.removeElement(trayIcon);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:Parallel id="showEffect">
			<s:Fade alphaFrom="0" alphaTo="1"/>
			<s:Scale scaleXFrom="0" scaleXTo="1" scaleYFrom="0" scaleYTo="1" transformX="0" transformY="140"/>
		</s:Parallel>
		
	</fx:Declarations>
	
	<s:TileGroup id="iconsGroup" left="0" right="0" bottom="0" top="0" verticalGap="0"
				 visible="{trayIconContainerArrowButton.selected}" includeInLayout="{trayIconContainerArrowButton.selected}"/>
	
	<s:PopUpAnchor id="popUpAnchor" displayPopUp="{trayIconContainerArrowButton.selected}" popUpPosition="below">
		<components:TrayIconPopUpContainer id="iconsContainer" creationCompleteEffect="{showEffect}" showEffect="{showEffect}"
										   width="138" height="140" 
										   backgroundAlpha="0" borderVisible="false" 
										   mouseOver="displayPopup=true" mouseOut="displayPopup=false">
			
		</components:TrayIconPopUpContainer>
	</s:PopUpAnchor>
	
	
	<s:Group height="100%">
		<components:TrayIconContainerArrowButton id="trayIconContainerArrowButton" 
												 width="21" height="20"
												 verticalCenter="0" 
												 change="trayIconContainerArrowButton_changeHandler(event)"/>
	</s:Group>
	
</s:Group>
