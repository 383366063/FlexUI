<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   preloader="net.lanelife.framework.preloaders.DownloadProgressBar"
			   creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import net.lanelife.framework.events.PreloaderEvent;
			import net.lanelife.framework.librarymanager.LibraryManager;
			import net.lanelife.framework.os.core.ScreenContext;
			import net.lanelife.framework.os.core.SystemContext;
			import net.lanelife.framework.pluginmanager.PluginManager;
			
			
			/**
			 * 1、加载 系统所需 libs
			 * 2、加载 系统配置 config
			 * 3、根据配置创建系统屏幕控制器：多屏幕、加载默认系统样式
			 * 4、安装系统插件【plugins】
			 */
			protected function init(event:FlexEvent):void
			{
				//加载所需类库
				var lm:LibraryManager = new LibraryManager();
				lm.install("os/libs.xml");
				
				lm.addEventListener(PreloaderEvent.PROGRESS, progressHandler);
				
				lm.addEventListener(LibraryManager.LOADED, function(lme:Event):void{
					
						var xmlLoader:URLLoader = new URLLoader();
						xmlLoader.addEventListener(Event.COMPLETE,function(event:Event):void {
							
								var config:XML = XML(event.target.data);
								
								//if (config.fullScreen=="true")
								//	FlexGlobals.topLevelApplication.stage.displayState = StageDisplayState.FULL_SCREEN;
								//系统环境变量
								SystemContext.instance.systemVariables = new Object();
								//屏幕个数
								SystemContext.instance.systemVariables.screenNumber = config.screenNumber;
								//当前显示的屏幕索引
								SystemContext.instance.systemVariables.screenIndex = config.screenIndex;
								//屏幕控制器集合
								SystemContext.instance.screenContexts = new ArrayCollection();
								
								//创建屏幕控制器
								for (var i:int=0; i<SystemContext.instance.systemVariables.screenNumber; i++)
								{
									var screenContext:ScreenContext = new ScreenContext();
									SystemContext.instance.screenContexts.addItem(screenContext);
								}
								//设置当前屏幕控制器
								SystemContext.instance.currentScreenContext = SystemContext.instance.screenContexts[SystemContext.instance.systemVariables.screenIndex];
								
								//加载主题外观
								var e:IEventDispatcher = FlexGlobals.topLevelApplication.styleManager.loadStyleDeclarations2(config.defaultSkin);
								e.addEventListener(ProgressEvent.PROGRESS, function(event:ProgressEvent):void{
									setProgress("正在加载主题外观...", size2str(event.bytesLoaded)+" / "+size2str(event.bytesTotal), "1/1", Math.ceil(event.bytesLoaded/event.bytesTotal*100));
								});
								e.addEventListener(Event.COMPLETE, function(ce:Event):void{
									
									//安装插件
									var pm:PluginManager = new PluginManager();
									pm.addEventListener(PreloaderEvent.PROGRESS, progressHandler);
									pm.addEventListener(PreloaderEvent.ALL_OK, function(ae:PreloaderEvent):void{
										removeElement(preloaderGroup);
									});
									pm.install("os/plugins.xml");
									
								});
							
						});
						xmlLoader.addEventListener(ProgressEvent.PROGRESS, function(event:ProgressEvent):void{
							setProgress("正在加载系统配置文件...", size2str(event.bytesLoaded)+" / "+size2str(event.bytesTotal), "1/1", Math.ceil(event.bytesLoaded/event.bytesTotal*100));
						});
						xmlLoader.load(new URLRequest("os/config.xml"));
					
				});

			}
			
			/**
			 * 处理进度条信息
			 */
			private function progressHandler(event:PreloaderEvent):void
			{
				setProgress(event.message, event.bytes, event.ticket, event.percent);
			}
			
			/**
			 * 设置进度条状态
			 */
			private function setProgress(message:String, bytes:String, ticket:String, percent:Number):void
			{
				messageLabel.text = message;
				bytesLabel.text = bytes;
				ticketLabel.text = ticket;
				var per:Number = 270*(percent/100)-20;
				percentRect.left = (per<0)?0:per;
			}
			
			private function size2str(size:Number):String
			{
				var m:Array = [ " Bytes", " KB", " MB" ];
				for(var i:int=0,n:int=m.length; i<n && size>=1024; i++)
				{
					size /= 1024;
				}
				return (i>0 ? size.toFixed(i) : int(size) ) + m[i];
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:HTTPService/>
		<mx:Menu/>
		
	</fx:Declarations>
	
	<!--系统背景-->
	<s:Rect left="0" right="0" top="0" bottom="0">
		<s:fill>
			<s:LinearGradient rotation="30">
				<s:GradientEntry color="#185d9b" ratio="0" />
				<s:GradientEntry color="#85d7ee" ratio="0.6" />
				<s:GradientEntry color="#85d7ee" ratio="1" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!--初始化加载信息显示容器-->
	<s:Group id="preloaderGroup" verticalCenter="-30" horizontalCenter="0">
		
		<s:Label id="messageLabel" text="正在加载..." left="1" color="#ffffff" fontFamily="宋体" fontSize="12" />
		
		<s:Label id="bytesLabel" text="0KB / 0KB" left="1" top="23" color="#ffffff" fontFamily="宋体" fontSize="12"/>
		
		<s:Label id="ticketLabel" text="1/1" top="23" right="1" color="#ffffff" fontFamily="宋体" fontSize="12"/>
		
		<s:Rect width="270" height="1" top="40">
			<s:fill>
				<s:SolidColor color="#b2e953"/>
			</s:fill>
		</s:Rect>
		<s:Rect id="percentRect" width="20" height="1" top="40">
			<s:fill>
				<s:SolidColor color="#ffffff"/>
			</s:fill>
		</s:Rect>
		
	</s:Group>
	
	
</s:Application>
